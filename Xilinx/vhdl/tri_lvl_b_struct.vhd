-- VHDL Entity tripole_lib.tri_lvl_b.symbol
--
-- Created:
--          by - nort.UNKNOWN (NORT-XPS14)
--          at - 12:37:02 01/24/2017
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2016.1 (Build 8)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY tri_lvl_b IS
  GENERIC( 
    N_INTERRUPTS : integer := 1;
    SW_WIDTH     : integer := 16;
    BUILD_NUMBER  : std_logic_vector(15 DOWNTO 0) := X"0008"
  );
  PORT( 
    Addr        : IN     std_logic_vector (7 DOWNTO 0);
    Ctrl        : IN     std_logic_vector (6 DOWNTO 0);
    Data_o      : IN     std_logic_vector (15 DOWNTO 0);
    RunStatus   : IN     std_logic;
    Switches    : IN     std_logic_vector (SW_WIDTH-1 DOWNTO 0);
    clk_100MHz  : IN     std_logic;
    Data_i      : OUT    std_logic_vector (15 DOWNTO 0);
    Fail_Out    : OUT    std_logic_vector (0 TO 0);
    IlckFail    : OUT    std_logic;
    Run         : OUT    std_logic;
    Status      : OUT    std_logic_vector (3 DOWNTO 0);
    tri_pulse_A : OUT    std_logic;
    tri_pulse_B : OUT    std_logic;
    tri_pulse_C : OUT    std_logic
  );

-- Declarations

END ENTITY tri_lvl_b ;

--
-- VHDL Architecture tripole_lib.tri_lvl_b.struct
--
-- Created:
--          by - nort.UNKNOWN (NORT-XPS14)
--          at - 12:37:02 01/24/2017
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2016.1 (Build 8)
--

-- Generation properties:
--   Component declarations : yes
--   Configurations         : embedded statements
--                          : add pragmas
--                          : exclude view name
--   
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.std_logic_unsigned.all;

LIBRARY tripole_lib;

ARCHITECTURE struct OF tri_lvl_b IS

  -- Architecture declarations

  -- Internal signal declarations
  SIGNAL AHiPerEn  : std_logic;
  SIGNAL APhaseEn  : std_logic;
  SIGNAL BHiPerEn  : std_logic;
  SIGNAL BPhaseEn  : std_logic;
  SIGNAL BdEn      : std_logic;
  SIGNAL BdIntr    : std_logic_vector(N_INTERRUPTS-1 DOWNTO 0);
  SIGNAL CHiPerEn  : std_logic;
  SIGNAL CPhaseEn  : std_logic;
  SIGNAL CtrlEn    : std_logic;
  SIGNAL ExpAck    : std_logic_vector(0 TO 0);
  SIGNAL ExpAddr   : std_logic_vector(7 DOWNTO 0);
  SIGNAL ExpRd     : std_logic;
  SIGNAL ExpReset  : std_logic;
  SIGNAL ExpWr     : std_logic;
  SIGNAL PerEn     : std_logic;
  SIGNAL RData     : std_logic_vector(15 DOWNTO 0);
  SIGNAL RdEn      : std_logic;
  SIGNAL WData     : std_logic_vector(15 DOWNTO 0);
  SIGNAL WrEn      : std_logic;
  SIGNAL tri_start : std_logic;

  -- Implicit buffer signal declarations
  SIGNAL Run_internal : std_logic;


  -- Component Declarations
  COMPONENT subbus_io
  GENERIC (
    USE_BD_WR_EN : std_logic := '0'
  );
  PORT (
    ExpRd  : IN     std_logic ;
    ExpWr  : IN     std_logic ;
    ExpAck : OUT    std_logic ;
    F8M    : IN     std_logic ;
    RdEn   : OUT    std_logic ;
    WrEn   : OUT    std_logic ;
    BdEn   : IN     std_logic ;
    BdWrEn : IN     std_logic 
  );
  END COMPONENT subbus_io;
  COMPONENT syscon
  GENERIC (
    BUILD_NUMBER  : std_logic_vector(15 DOWNTO 0) := X"0007";
    INSTRUMENT_ID : std_logic_vector(15 DOWNTO 0) := X"0001";
    N_INTERRUPTS  : integer range 15 downto 0     := 1;
    N_BOARDS      : integer range 15 downto 0     := 1;
    ADDR_WIDTH    : integer range 16 downto 8     := 16;
    INTA_ADDR     : std_logic_vector(15 DOWNTO 0) := X"0001";
    BDID_ADDR     : std_logic_vector(15 DOWNTO 0) := X"0002";
    FAIL_ADDR     : std_logic_vector(15 DOWNTO 0) := X"0004";
    SW_ADDR       : std_logic_vector(15 DOWNTO 0) := X"0005";
    FAIL_WIDTH    : integer range 16 downto 1     := 1;
    SW_WIDTH      : integer range 16 DOWNTO 0     := 16;
    TO_ENABLED    : boolean                       := false
  );
  PORT (
    Addr          : IN     std_logic_vector (ADDR_WIDTH-1 DOWNTO 0);
    BdIntr        : IN     std_logic_vector (N_INTERRUPTS-1 DOWNTO 0);
    Ctrl          : IN     std_logic_vector (6 DOWNTO 0);
    Data_o        : IN     std_logic_vector (15 DOWNTO 0);
    ExpAck        : IN     std_logic_vector (N_BOARDS-1 DOWNTO 0);
    RData         : IN     std_logic_vector (16*N_BOARDS-1 DOWNTO 0);
    Switches      : IN     std_logic_vector (SW_WIDTH-1 DOWNTO 0);
    clk           : IN     std_logic;
    CmdEnbl       : OUT    std_logic;
    CmdStrb       : OUT    std_logic;
    Collision     : OUT    std_logic;
    Data_i        : OUT    std_logic_vector (15 DOWNTO 0);
    ExpAddr       : OUT    std_logic_vector (ADDR_WIDTH-1 DOWNTO 0);
    ExpRd         : OUT    std_logic;
    ExpReset      : OUT    std_logic;
    ExpWr         : OUT    std_logic;
    Fail_Out      : OUT    std_logic_vector (FAIL_WIDTH-1 DOWNTO 0);
    Flt_CPU_Reset : OUT    std_logic;
    INTA          : OUT    std_logic;
    Status        : OUT    std_logic_vector (3 DOWNTO 0);
    WData         : OUT    std_logic_vector (15 DOWNTO 0)
  );
  END COMPONENT syscon;
  COMPONENT tri_addr
  GENERIC (
    BASE_ADDR : std_logic_vector (7 DOWNTO 0) := X"20"
  );
  PORT (
    ExpAddr  : IN     std_logic_vector (7 DOWNTO 0);
    AHiPerEn : OUT    std_logic ;
    APhaseEn : OUT    std_logic ;
    BHiPerEn : OUT    std_logic ;
    BPhaseEn : OUT    std_logic ;
    BdEn     : OUT    std_logic ;
    CHiPerEn : OUT    std_logic ;
    CPhaseEn : OUT    std_logic ;
    CtrlEn   : OUT    std_logic ;
    PerEn    : OUT    std_logic 
  );
  END COMPONENT tri_addr;
  COMPONENT tri_period
  PORT (
    CtrlEn    : IN     std_logic ;
    PerEn     : IN     std_logic ;
    RdEn      : IN     std_logic ;
    RunStatus : IN     std_logic ;
    WData     : IN     std_logic_vector (15 DOWNTO 0);
    WrEn      : IN     std_logic ;
    clk       : IN     std_logic ;
    rst       : IN     std_logic ;
    Fail      : OUT    std_logic ;
    RunOut    : OUT    std_logic ;
    tri_start : OUT    std_logic ;
    RData     : INOUT  std_logic_vector (15 DOWNTO 0)
  );
  END COMPONENT tri_period;
  COMPONENT tri_pulse
  PORT (
    ExpReset   : IN     std_logic ;
    HiPerEn    : IN     std_logic ;
    PhaseEn    : IN     std_logic ;
    RdEn       : IN     std_logic ;
    Run        : IN     std_logic ;
    WData      : IN     std_logic_vector (15 DOWNTO 0);
    WrEn       : IN     std_logic ;
    clk_100MHz : IN     std_logic ;
    tri_start  : IN     std_logic ;
    pulse      : OUT    std_logic ;
    RData      : INOUT  std_logic_vector (15 DOWNTO 0)
  );
  END COMPONENT tri_pulse;

  -- Optional embedded configurations
  -- pragma synthesis_off
  FOR ALL : subbus_io USE ENTITY tripole_lib.subbus_io;
  FOR ALL : syscon USE ENTITY tripole_lib.syscon;
  FOR ALL : tri_addr USE ENTITY tripole_lib.tri_addr;
  FOR ALL : tri_period USE ENTITY tripole_lib.tri_period;
  FOR ALL : tri_pulse USE ENTITY tripole_lib.tri_pulse;
  -- pragma synthesis_on


BEGIN

  -- Instance port mappings.
  U_5 : subbus_io
    GENERIC MAP (
      USE_BD_WR_EN => '0'
    )
    PORT MAP (
      ExpRd  => ExpRd,
      ExpWr  => ExpWr,
      ExpAck => ExpAck(0),
      F8M    => clk_100MHz,
      RdEn   => RdEn,
      WrEn   => WrEn,
      BdEn   => BdEn,
      BdWrEn => BdEn
    );
  U_2 : syscon
    GENERIC MAP (
      BUILD_NUMBER  => BUILD_NUMBER,
      INSTRUMENT_ID => X"0006",
      N_INTERRUPTS  => N_INTERRUPTS,
      N_BOARDS      => 1,
      ADDR_WIDTH    => 8,
      INTA_ADDR     => X"0001",
      BDID_ADDR     => X"0002",
      FAIL_ADDR     => X"0004",
      SW_ADDR       => X"0005",
      FAIL_WIDTH    => 1,
      SW_WIDTH      => SW_WIDTH,
      TO_ENABLED    => false
    )
    PORT MAP (
      clk           => clk_100MHz,
      Ctrl          => Ctrl,
      Addr          => Addr,
      Data_i        => Data_i,
      Data_o        => Data_o,
      Status        => Status,
      ExpRd         => ExpRd,
      ExpWr         => ExpWr,
      WData         => WData,
      RData         => RData,
      ExpAddr       => ExpAddr,
      ExpAck        => ExpAck,
      BdIntr        => BdIntr,
      Collision     => OPEN,
      INTA          => OPEN,
      CmdEnbl       => OPEN,
      CmdStrb       => OPEN,
      ExpReset      => ExpReset,
      Fail_Out      => Fail_Out,
      Switches      => Switches,
      Flt_CPU_Reset => OPEN
    );
  U_3 : tri_addr
    GENERIC MAP (
      BASE_ADDR => X"20"
    )
    PORT MAP (
      ExpAddr  => ExpAddr,
      AHiPerEn => AHiPerEn,
      APhaseEn => APhaseEn,
      BHiPerEn => BHiPerEn,
      BPhaseEn => BPhaseEn,
      BdEn     => BdEn,
      CHiPerEn => CHiPerEn,
      CPhaseEn => CPhaseEn,
      CtrlEn   => CtrlEn,
      PerEn    => PerEn
    );
  U_0 : tri_period
    PORT MAP (
      CtrlEn    => CtrlEn,
      PerEn     => PerEn,
      RdEn      => RdEn,
      RunStatus => RunStatus,
      WData     => WData,
      WrEn      => WrEn,
      clk       => clk_100MHz,
      rst       => ExpReset,
      Fail      => IlckFail,
      RunOut    => Run_internal,
      tri_start => tri_start,
      RData     => RData
    );
  U_1 : tri_pulse
    PORT MAP (
      ExpReset   => ExpReset,
      HiPerEn    => AHiPerEn,
      PhaseEn    => APhaseEn,
      RdEn       => RdEn,
      Run        => Run_internal,
      WData      => WData,
      WrEn       => WrEn,
      clk_100MHz => clk_100MHz,
      tri_start  => tri_start,
      pulse      => tri_pulse_A,
      RData      => RData
    );
  U_4 : tri_pulse
    PORT MAP (
      ExpReset   => ExpReset,
      HiPerEn    => BHiPerEn,
      PhaseEn    => BPhaseEn,
      RdEn       => RdEn,
      Run        => Run_internal,
      WData      => WData,
      WrEn       => WrEn,
      clk_100MHz => clk_100MHz,
      tri_start  => tri_start,
      pulse      => tri_pulse_B,
      RData      => RData
    );
  U_6 : tri_pulse
    PORT MAP (
      ExpReset   => ExpReset,
      HiPerEn    => CHiPerEn,
      PhaseEn    => CPhaseEn,
      RdEn       => RdEn,
      Run        => Run_internal,
      WData      => WData,
      WrEn       => WrEn,
      clk_100MHz => clk_100MHz,
      tri_start  => tri_start,
      pulse      => tri_pulse_C,
      RData      => RData
    );

  -- Implicit buffered output assignments
  Run <= Run_internal;

END ARCHITECTURE struct;
