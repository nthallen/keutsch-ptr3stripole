--
-- VHDL Test Bench tripole_lib.tri_lvl_b_tb.tri_lvl_b_tester
--
-- Created:
--          by - . (NORT-XPS14)
--          at - 19:00:00 12/31/69
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2013.1b (Build 2)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;


ENTITY tri_lvl_b_tb IS
END tri_lvl_b_tb;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
LIBRARY tripole_lib;
USE tripole_lib.ALL;


ARCHITECTURE rtl OF tri_lvl_b_tb IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL Addr        : std_logic_vector(7 DOWNTO 0);
   SIGNAL clk_100MHz  : std_logic;
   SIGNAL Ctrl        : std_logic_vector(6 DOWNTO 0);
   SIGNAL Data_i      : std_logic_vector(15 DOWNTO 0);
   SIGNAL Data_o      : std_logic_vector(15 DOWNTO 0);
   SIGNAL Status      : std_logic_vector(3 DOWNTO 0);
   SIGNAL tri_pulse_A : std_logic;
   SIGNAL tri_pulse_B : std_logic;
   SIGNAL tri_pulse_C : std_logic;
   SIGNAL Ilock_rtn   : std_logic;
   SIGNAL Fail_Out    : std_logic_vector(0 DOWNTO 0);
   SIGNAL Ilock_fail  : std_logic;
   SIGNAL Switches    : std_logic_vector(0-1 DOWNTO 0);


   -- Component declarations
   COMPONENT tri_lvl_b
      GENERIC( 
        N_INTERRUPTS : integer := 1;
        SW_WIDTH     : integer := 16
      );
      PORT (
         Addr        : IN     std_logic_vector(7 DOWNTO 0);
         clk_100MHz  : IN     std_logic;
         Ctrl        : IN     std_logic_vector(6 DOWNTO 0);
         Ilock_rtn   : IN     std_logic;
         Switches    : IN     std_logic_vector (SW_WIDTH-1 DOWNTO 0);
         Data_i      : OUT    std_logic_vector(15 DOWNTO 0);
         Data_o      : IN     std_logic_vector(15 DOWNTO 0);
         Fail_Out    : OUT    std_logic_vector(0 DOWNTO 0);
         Ilock_fail    : OUT    std_logic;
         Status      : OUT    std_logic_vector(3 DOWNTO 0);
         tri_pulse_A : OUT    std_logic;
         tri_pulse_B : OUT    std_logic;
         tri_pulse_C : OUT    std_logic
      );
   END COMPONENT;

   COMPONENT tri_lvl_b_tester
      PORT (
         Addr        : OUT    std_logic_vector(7 DOWNTO 0);
         clk_100MHz  : OUT    std_logic;
         Ctrl        : OUT    std_logic_vector(6 DOWNTO 0);
         Data_i      : IN     std_logic_vector(15 DOWNTO 0);
         Data_o      : OUT    std_logic_vector(15 DOWNTO 0);
         Status      : IN     std_logic_vector(3 DOWNTO 0);
         Ilock_rtn   : OUT    std_logic;
         Fail_Out    : IN     std_logic_vector(0 DOWNTO 0);
         Ilock_fail  : IN     std_logic;
         tri_pulse_A : IN     std_logic;
         tri_pulse_B : IN     std_logic;
         tri_pulse_C : IN     std_logic
      );
   END COMPONENT;

   -- embedded configurations
   -- pragma synthesis_off
   FOR DUT : tri_lvl_b USE ENTITY tripole_lib.tri_lvl_b;
   FOR tester : tri_lvl_b_tester USE ENTITY tripole_lib.tri_lvl_b_tester;
   -- pragma synthesis_on

BEGIN

         DUT : tri_lvl_b
            GENERIC MAP (
              N_INTERRUPTS => 0,
              SW_WIDTH => 0
            )
            PORT MAP (
               Addr        => Addr,
               clk_100MHz  => clk_100MHz,
               Ctrl        => Ctrl,
               Data_i      => Data_i,
               Data_o      => Data_o,
               Switches    => Switches,
               Status      => Status,
               Ilock_rtn   => Ilock_rtn,
               Fail_Out    => Fail_Out,
               Ilock_fail  => Ilock_fail,
               tri_pulse_A => tri_pulse_A,
               tri_pulse_B => tri_pulse_B,
               tri_pulse_C => tri_pulse_C
            );

         tester : tri_lvl_b_tester
            PORT MAP (
               Addr        => Addr,
               clk_100MHz  => clk_100MHz,
               Ctrl        => Ctrl,
               Data_i      => Data_i,
               Data_o      => Data_o,
               Status      => Status,
               Ilock_rtn   => Ilock_rtn,
               Fail_Out    => Fail_Out,
               Ilock_fail  => Ilock_fail,
               tri_pulse_A => tri_pulse_A,
               tri_pulse_B => tri_pulse_B,
               tri_pulse_C => tri_pulse_C
            );


END rtl;