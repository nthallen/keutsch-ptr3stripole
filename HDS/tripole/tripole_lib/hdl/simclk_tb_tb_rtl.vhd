--
-- VHDL Test Bench tripole_lib.simclk_tb.simclk_tester
--
-- Created:
--          by - nort.UNKNOWN (NORT-XPS14)
--          at - 15:59:14 03/10/2017
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2016.1 (Build 8)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;


ENTITY simclk_tb IS
  GENERIC (
    CLK_PERIOD : integer := 5000;
    PHASE_RES  : integer := 280
  );
END ENTITY simclk_tb;


LIBRARY tripole_lib;
USE tripole_lib.ALL;


ARCHITECTURE rtl OF simclk_tb IS

  -- Architecture declarations

  -- Internal signal declarations
  SIGNAL PSEN     : std_logic;
  SIGNAL PSINCDEC : std_logic;
  SIGNAL PSDONE   : std_logic;
  SIGNAL clk      : std_logic;
  SIGNAL dlyclk   : std_logic;
  SIGNAL rst      : std_logic;
  SIGNAL SimDone  : std_logic;


  -- Component declarations
  COMPONENT simclk
    GENERIC (
      CLK_PERIOD : integer := 5000;
      PHASE_RES  : integer := 280
    );
    PORT (
      PSEN     : IN     std_logic;
      PSINCDEC : IN     std_logic;
      PSDONE   : OUT    std_logic;
      clk      : IN     std_logic;
      dlyclk   : OUT    std_logic;
      rst      : IN     std_logic
    );
  END COMPONENT simclk;

  -- embedded configurations
  -- pragma synthesis_off
  FOR DUTsimclk : simclk USE ENTITY tripole_lib.simclk;
  -- pragma synthesis_on

BEGIN

    DUTsimclk : simclk
      GENERIC MAP (
        CLK_PERIOD => CLK_PERIOD,
        PHASE_RES  => PHASE_RES
      )
      PORT MAP (
        PSEN     => PSEN,
        PSINCDEC => PSINCDEC,
        PSDONE   => PSDONE,
        clk      => clk,
        dlyclk   => dlyclk,
        rst      => rst
      );

  f100m_clk : Process is
  Begin
    clk <= '0';
    -- pragma synthesis_off
    wait for 20 ns;
    while SimDone = '0' loop
      clk <= '1';
      wait for 3 ns;
      clk <= '0';
      wait for 2 ns;
    end loop;
    wait;
    -- pragma synthesis_on
  End Process;

  testproc : Process IS
  BEGIN
    rst <= '1';
    PSEN <= '0';
    PSINCDEC <= '0';
    SimDone <= '0';
    -- pragma synthesis_off
    wait until clk'event AND clk = '1';
    wait until clk'event AND clk = '1';
    rst <= '0';
    wait for 50 ns;
    
    for i in 1 to 280 loop
      wait until clk'event AND clk = '1';
      PSINCDEC <= '1';
      PSEN <= '1';
      wait until clk'event AND clk = '1';
      PSEN <= '0';
      wait until PSDONE = '1';
    end loop;
    wait until PSDONE = '0';
    wait until clk'event AND clk = '1';
    
    SimDone <= '1';
    wait;
    -- pragma synthesis_on
  END Process;
  
END ARCHITECTURE rtl;