-- VHDL Entity tripole_lib.tri_lvl_c.symbol
--
-- Created:
--          by - nort.UNKNOWN (NORT-XPS14)
--          at - 14:57:11 03/ 8/2017
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2016.1 (Build 8)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY tri_lvl_c IS
  PORT( 
    ExpAddr     : IN     std_logic_vector (7 DOWNTO 0);
    ExpRd       : IN     std_logic;
    ExpReset    : IN     std_logic;
    ExpWr       : IN     std_logic;
    Ilock_rtn   : IN     std_logic;
    WData       : IN     std_logic_vector (15 DOWNTO 0);
    clk_100MHz  : IN     std_logic;
    ExpAck      : OUT    std_logic_vector (7 DOWNTO 0);
    IlckFail    : OUT    std_logic;
    RData0      : OUT    std_logic_vector (15 DOWNTO 0);
    RData1      : OUT    std_logic_vector (15 DOWNTO 0);
    RData2      : OUT    std_logic_vector (15 DOWNTO 0);
    RData3      : OUT    std_logic_vector (15 DOWNTO 0);
    RData4      : OUT    std_logic_vector (15 DOWNTO 0);
    RData5      : OUT    std_logic_vector (15 DOWNTO 0);
    RData6      : OUT    std_logic_vector (15 DOWNTO 0);
    RData7      : OUT    std_logic_vector (15 DOWNTO 0);
    tri_pulse_A : OUT    std_logic;
    tri_pulse_B : OUT    std_logic;
    tri_pulse_C : OUT    std_logic
  );

-- Declarations

END ENTITY tri_lvl_c ;

--
-- VHDL Architecture tripole_lib.tri_lvl_c.struct
--
-- Created:
--          by - nort.UNKNOWN (NORT-XPS14)
--          at - 14:57:11 03/ 8/2017
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2016.1 (Build 8)
--

-- Generation properties:
--   Component declarations : yes
--   Configurations         : embedded statements
--                          : add pragmas
--                          : exclude view name
--   
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.std_logic_unsigned.all;

LIBRARY tripole_lib;

ARCHITECTURE struct OF tri_lvl_c IS

  -- Architecture declarations

  -- Internal signal declarations
  SIGNAL AHiPerEn  : std_logic;
  SIGNAL APhaseEn  : std_logic;
  SIGNAL BHiPerEn  : std_logic;
  SIGNAL BPhaseEn  : std_logic;
  SIGNAL BdEn      : std_logic_vector(7 DOWNTO 0);
  SIGNAL CHiPerEn  : std_logic;
  SIGNAL CPhaseEn  : std_logic;
  SIGNAL CtrlEn    : std_logic;
  SIGNAL PerEn     : std_logic;
  SIGNAL RdEn      : std_logic;
  SIGNAL Run       : std_logic;
  SIGNAL WrEn      : std_logic;
  SIGNAL tri_start : std_logic;


  -- Component Declarations
  COMPONENT subbus_io
  GENERIC (
    N_ENABLE     : integer   := 1;
    USE_BD_WR_EN : std_logic := '0'
  );
  PORT (
    ExpRd  : IN     std_logic ;
    ExpWr  : IN     std_logic ;
    ExpAck : OUT    std_logic_vector (N_ENABLE-1 DOWNTO 0);
    F8M    : IN     std_logic ;
    RdEn   : OUT    std_logic ;
    WrEn   : OUT    std_logic ;
    BdEn   : IN     std_logic_vector (N_ENABLE-1 DOWNTO 0);
    BdWrEn : IN     std_logic_vector (N_ENABLE-1 DOWNTO 0)
  );
  END COMPONENT subbus_io;
  COMPONENT tri_addr
  GENERIC (
    BASE_ADDR : std_logic_vector (7 DOWNTO 0) := X"20"
  );
  PORT (
    ExpAddr  : IN     std_logic_vector (7 DOWNTO 0);
    AHiPerEn : OUT    std_logic ;
    APhaseEn : OUT    std_logic ;
    BHiPerEn : OUT    std_logic ;
    BPhaseEn : OUT    std_logic ;
    BdEn     : OUT    std_logic_vector (7 DOWNTO 0);
    CHiPerEn : OUT    std_logic ;
    CPhaseEn : OUT    std_logic ;
    CtrlEn   : OUT    std_logic ;
    PerEn    : OUT    std_logic 
  );
  END COMPONENT tri_addr;
  COMPONENT tri_period
  PORT (
    CtrlEn    : IN     std_logic ;
    Ilock_rtn : IN     std_logic ;
    PerEn     : IN     std_logic ;
    WData     : IN     std_logic_vector (15 DOWNTO 0);
    WrEn      : IN     std_logic ;
    clk       : IN     std_logic ;
    rst       : IN     std_logic ;
    Count     : OUT    std_logic_vector (15 DOWNTO 0);
    Fail      : OUT    std_logic ;
    RunOut    : OUT    std_logic ;
    StatRData : OUT    std_logic_vector (15 DOWNTO 0);
    tri_start : OUT    std_logic 
  );
  END COMPONENT tri_period;
  COMPONENT tri_pulse
  PORT (
    ExpReset   : IN     std_logic ;
    HiPerEn    : IN     std_logic ;
    PhaseEn    : IN     std_logic ;
    Run        : IN     std_logic ;
    WData      : IN     std_logic_vector (15 DOWNTO 0);
    WrEn       : IN     std_logic ;
    clk_100MHz : IN     std_logic ;
    tri_start  : IN     std_logic ;
    PerCount   : OUT    std_logic_vector (15 DOWNTO 0);
    PhsCount   : OUT    std_logic_vector (15 DOWNTO 0);
    pulse      : OUT    std_logic 
  );
  END COMPONENT tri_pulse;

  -- Optional embedded configurations
  -- pragma synthesis_off
  FOR ALL : subbus_io USE ENTITY tripole_lib.subbus_io;
  FOR ALL : tri_addr USE ENTITY tripole_lib.tri_addr;
  FOR ALL : tri_period USE ENTITY tripole_lib.tri_period;
  FOR ALL : tri_pulse USE ENTITY tripole_lib.tri_pulse;
  -- pragma synthesis_on


BEGIN

  -- Instance port mappings.
  subbus : subbus_io
    GENERIC MAP (
      N_ENABLE     => 8,
      USE_BD_WR_EN => '0'
    )
    PORT MAP (
      ExpRd  => ExpRd,
      ExpWr  => ExpWr,
      ExpAck => ExpAck,
      F8M    => clk_100MHz,
      RdEn   => RdEn,
      WrEn   => WrEn,
      BdEn   => BdEn,
      BdWrEn => BdEn
    );
  bd_addr : tri_addr
    GENERIC MAP (
      BASE_ADDR => X"20"
    )
    PORT MAP (
      ExpAddr  => ExpAddr,
      AHiPerEn => AHiPerEn,
      APhaseEn => APhaseEn,
      BHiPerEn => BHiPerEn,
      BPhaseEn => BPhaseEn,
      BdEn     => BdEn,
      CHiPerEn => CHiPerEn,
      CPhaseEn => CPhaseEn,
      CtrlEn   => CtrlEn,
      PerEn    => PerEn
    );
  Period : tri_period
    PORT MAP (
      CtrlEn    => CtrlEn,
      Ilock_rtn => Ilock_rtn,
      PerEn     => PerEn,
      WData     => WData,
      WrEn      => WrEn,
      clk       => clk_100MHz,
      rst       => ExpReset,
      Count     => RData1,
      Fail      => IlckFail,
      RunOut    => Run,
      StatRData => RData0,
      tri_start => tri_start
    );
  PhsA : tri_pulse
    PORT MAP (
      ExpReset   => ExpReset,
      HiPerEn    => AHiPerEn,
      PhaseEn    => APhaseEn,
      Run        => Run,
      WData      => WData,
      WrEn       => WrEn,
      clk_100MHz => clk_100MHz,
      tri_start  => tri_start,
      PerCount   => RData2,
      PhsCount   => RData3,
      pulse      => tri_pulse_A
    );
  PhsB : tri_pulse
    PORT MAP (
      ExpReset   => ExpReset,
      HiPerEn    => BHiPerEn,
      PhaseEn    => BPhaseEn,
      Run        => Run,
      WData      => WData,
      WrEn       => WrEn,
      clk_100MHz => clk_100MHz,
      tri_start  => tri_start,
      PerCount   => RData4,
      PhsCount   => RData5,
      pulse      => tri_pulse_B
    );
  PhsC : tri_pulse
    PORT MAP (
      ExpReset   => ExpReset,
      HiPerEn    => CHiPerEn,
      PhaseEn    => CPhaseEn,
      Run        => Run,
      WData      => WData,
      WrEn       => WrEn,
      clk_100MHz => clk_100MHz,
      tri_start  => tri_start,
      PerCount   => RData6,
      PhsCount   => RData7,
      pulse      => tri_pulse_C
    );

END ARCHITECTURE struct;
