-- VHDL Entity tripole_lib.dither_wq.interface
--
-- Created:
--          by - nort.Domain Users (NORT-XPS14)
--          at - 17:47:22 08/02/16
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2013.1b (Build 2)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.std_logic_unsigned.all;

ENTITY dither_wq IS
   PORT( 
      ExpReset : IN     std_logic;
      PerEn    : IN     std_logic;
      Ready    : IN     std_logic;
      WData    : IN     std_logic_vector (15 DOWNTO 0);
      WrEn     : IN     std_logic;
      clk      : IN     std_logic;
      WData1   : OUT    std_logic_vector (15 DOWNTO 0);
      WrEn1    : OUT    std_logic
   );

-- Declarations

END dither_wq ;

--
-- VHDL Architecture tripole_lib.dither_wq.fsm
--
-- Created:
--          by - nort.Domain Users (NORT-XPS14)
--          at - 12:30:47 08/03/16
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2013.1b (Build 2)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.std_logic_unsigned.all;
 
ARCHITECTURE fsm OF dither_wq IS

   TYPE STATE_TYPE IS (
      s0,
      s1,
      s2,
      s3,
      s4
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare any pre-registered internal signals
   SIGNAL WData1_cld : std_logic_vector (15 DOWNTO 0);
   SIGNAL WrEn1_cld : std_logic ;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk
   )
   -----------------------------------------------------------------
   BEGIN
      IF (clk'EVENT AND clk = '1') THEN
         IF (ExpReset = '1') THEN
            current_state <= s0;
            -- Default Reset Values
            WData1_cld <= (others => '0');
            WrEn1_cld <= '0';
         ELSE
            current_state <= next_state;

            -- Combined Actions
            CASE current_state IS
               WHEN s0 => 
                  WData1_cld <= (others => '0');
                  WrEn1_cld <= '0';
               WHEN s2 => 
                  WData1_cld <= WData;
                  WrEn1_cld <= '1';
               WHEN s4 => 
                  WrEn1_cld <= '0';
               WHEN OTHERS =>
                  NULL;
            END CASE;
         END IF;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      PerEn,
      Ready,
      WrEn,
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN s0 => 
            next_state <= s1;
         WHEN s1 => 
            IF (WrEn = '1'
                 AND
                PerEn = '1') THEN 
               next_state <= s2;
            ELSE
               next_state <= s1;
            END IF;
         WHEN s2 => 
            next_state <= s3;
         WHEN s3 => 
            IF (Ready /= '1') THEN 
               next_state <= s4;
            ELSE
               next_state <= s3;
            END IF;
         WHEN s4 => 
            next_state <= s1;
         WHEN OTHERS =>
            next_state <= s0;
      END CASE;
   END PROCESS nextstate_proc;
 
   -- Concurrent Statements
   -- Clocked output assignments
   WData1 <= WData1_cld;
   WrEn1 <= WrEn1_cld;
END fsm;
