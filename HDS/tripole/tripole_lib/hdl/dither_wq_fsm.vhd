-- VHDL Entity tripole_lib.dither_wq.symbol
--
-- Created:
--          by - nort.UNKNOWN (NORT-XPS14)
--          at - 16:03:39 03/ 1/2017
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2016.1 (Build 8)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.std_logic_unsigned.all;

ENTITY dither_wq IS
  PORT( 
    ExpReset : IN     std_logic;
    PerEn    : IN     std_logic;
    WData    : IN     std_logic_vector (15 DOWNTO 0);
    WrEn     : IN     std_logic;
    clk      : IN     std_logic;
    Count    : OUT    std_logic_vector (15 DOWNTO 0)
  );

-- Declarations

END ENTITY dither_wq ;

--
-- VHDL Architecture tripole_lib.dither_wq.fsm
--
-- Created:
--          by - nort.UNKNOWN (NORT-XPS14)
--          at - 15:33:16 03/ 1/2017
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2016.1 (Build 8)
--
--  Machine             :  "csm", synchronous
--  Encoding            :  none
--  Style               :  case, 3 processes
--  Clock               :  "clk", rising 
--  Synchronous Reset   :  "ExpReset", synchronous, active high
--  State variable type :  [auto]
--  Default state assignment disabled
--  State actions registered on current state
--  
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.std_logic_unsigned.all;
 
ARCHITECTURE fsm OF dither_wq IS

  TYPE STATE_TYPE IS (
    s0,
    s1,
    s2
  );
 
  -- Declare current and next state signals
  SIGNAL current_state : STATE_TYPE;
  SIGNAL next_state : STATE_TYPE;

  -- Declare any pre-registered internal signals
  SIGNAL Count_cld : std_logic_vector (15 DOWNTO 0);

BEGIN

  -----------------------------------------------------------------
  clocked_proc : PROCESS ( 
    clk
  )
  -----------------------------------------------------------------
  BEGIN
    IF (clk'EVENT AND clk = '1') THEN
      IF (ExpReset = '1') THEN
        current_state <= s0;
        -- Default Reset Values
        Count_cld <= (others => '0');
      ELSE
        current_state <= next_state;

        -- Combined Actions
        CASE current_state IS
          WHEN s0 => 
            Count_cld <= (others => '0');
          WHEN s2 => 
            Count_cld <= WData;
          WHEN OTHERS =>
            NULL;
        END CASE;
      END IF;
    END IF;
  END PROCESS clocked_proc;
 
  -----------------------------------------------------------------
  nextstate_proc : PROCESS ( 
    PerEn,
    WrEn,
    current_state
  )
  -----------------------------------------------------------------
  BEGIN
    CASE current_state IS
      WHEN s0 => 
        next_state <= s1;
      WHEN s1 => 
        IF (WrEn = '1'
             AND
            PerEn = '1') THEN 
          next_state <= s2;
        ELSE
          next_state <= s1;
        END IF;
      WHEN s2 => 
        next_state <= s1;
      WHEN OTHERS =>
        next_state <= s0;
    END CASE;
  END PROCESS nextstate_proc;
 
  -- Concurrent Statements
  -- Clocked output assignments
  Count <= Count_cld;
END ARCHITECTURE fsm;
