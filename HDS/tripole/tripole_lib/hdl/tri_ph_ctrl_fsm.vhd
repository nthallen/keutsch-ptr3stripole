-- VHDL Entity tripole_lib.tri_ph_ctrl.interface
--
-- Created:
--          by - nort.UNKNOWN (NORT-XPS14)
--          at - 13:16:50 03/10/2017
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2016.1 (Build 8)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

ENTITY tri_ph_ctrl IS
  GENERIC( 
    DELAY_BITS : integer := 7
  );
  PORT( 
    Delay     : IN     std_logic_vector (DELAY_BITS-1 DOWNTO 0);
    ExpReset  : IN     std_logic;
    Run       : IN     std_logic;
    clk       : IN     std_logic;
    tri_start : IN     std_logic;
    tri_phase : OUT    std_logic
  );

-- Declarations

END ENTITY tri_ph_ctrl ;

--
-- VHDL Architecture tripole_lib.tri_ph_ctrl.fsm
--
-- Created:
--          by - nort.UNKNOWN (NORT-XPS14)
--          at - 13:18:52 03/10/2017
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2016.1 (Build 8)
--
--  Machine             :  "csm", synchronous
--  Encoding            :  none
--  Style               :  case, 3 processes
--  Clock               :  "clk", rising 
--  Synchronous Reset   :  "ExpReset", synchronous, active high
--  State variable type :  [auto]
--  Default state assignment disabled
--  State actions registered on current state
--  
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;
 
ARCHITECTURE fsm OF tri_ph_ctrl IS

  -- Architecture Declarations
  CONSTANT Delay0 : std_logic_vector(DELAY_BITS-1 DOWNTO 0) := (others => '0');
  CONSTANT Delay1 : std_logic_vector(DELAY_BITS-1 DOWNTO 0) := std_logic_vector(to_unsigned(1,DELAY_BITS));
  SIGNAL CntDn : std_logic_vector(DELAY_BITS-1 DOWNTO 0);  

  TYPE STATE_TYPE IS (
    s0,
    s2,
    s3,
    s4,
    s1,
    s5
  );
 
  -- Declare current and next state signals
  SIGNAL current_state : STATE_TYPE;
  SIGNAL next_state : STATE_TYPE;

  -- Declare any pre-registered internal signals
  SIGNAL tri_phase_cld : std_logic ;

BEGIN

  -----------------------------------------------------------------
  clocked_proc : PROCESS ( 
    clk
  )
  -----------------------------------------------------------------
  BEGIN
    IF (clk'EVENT AND clk = '1') THEN
      IF (ExpReset = '1') THEN
        current_state <= s0;
        -- Default Reset Values
        tri_phase_cld <= '0';
        CntDn <= (others => '0');
      ELSE
        current_state <= next_state;

        -- Combined Actions
        CASE current_state IS
          WHEN s0 => 
            tri_phase_cld <= '0';
            IF (Run = '1') THEN 
              tri_phase_cld <= '0';
            END IF;
          WHEN s2 => 
            CntDn <= Delay-1;
            IF (Run /= '1') THEN 
            ELSIF (tri_start = '1' AND
                   Delay = Delay0) THEN 
              tri_phase_cld <= '1';
            ELSIF (tri_start = '1') THEN 
              tri_phase_cld <= '0';
            END IF;
          WHEN s3 => 
            CntDn <= CntDn - 1;
            IF (Run /= '1') THEN 
            ELSIF (CntDn = Delay0 AND
                   Delay /= Delay0 AND
                   Delay /= Delay1 AND
                   tri_start = '1') THEN 
              tri_phase_cld <= '1';
              CntDn <= Delay - 2;
            ELSIF (CntDn = Delay0) THEN 
              tri_phase_cld <= '1';
            END IF;
          WHEN s4 => 
            IF (tri_start = '1' AND
                Delay /= Delay0 AND
                Delay /= Delay1) THEN 
              tri_phase_cld <= '0';
              CntDn <= Delay-2;
            ELSE
              tri_phase_cld <= '0';
            END IF;
          WHEN s1 => 
            tri_phase_cld <= '0';
          WHEN s5 => 
            tri_phase_cld <= '0';
          WHEN OTHERS =>
            NULL;
        END CASE;
      END IF;
    END IF;
  END PROCESS clocked_proc;
 
  -----------------------------------------------------------------
  nextstate_proc : PROCESS ( 
    CntDn,
    Delay,
    Run,
    current_state,
    tri_start
  )
  -----------------------------------------------------------------
  BEGIN
    CASE current_state IS
      WHEN s0 => 
        IF (Run = '1') THEN 
          next_state <= s2;
        ELSE
          next_state <= s0;
        END IF;
      WHEN s2 => 
        IF (Run /= '1') THEN 
          next_state <= s0;
        ELSIF (tri_start = '1' AND
               Delay = Delay0) THEN 
          next_state <= s4;
        ELSIF (tri_start = '1') THEN 
          next_state <= s3;
        ELSE
          next_state <= s2;
        END IF;
      WHEN s3 => 
        IF (Run /= '1') THEN 
          next_state <= s0;
        ELSIF (CntDn = Delay0 AND
               Delay /= Delay0 AND
               Delay /= Delay1 AND
               tri_start = '1') THEN 
          next_state <= s1;
        ELSIF (CntDn = Delay0) THEN 
          next_state <= s4;
        ELSE
          next_state <= s3;
        END IF;
      WHEN s4 => 
        IF (tri_start = '1' AND
            Delay /= Delay0 AND
            Delay /= Delay1) THEN 
          next_state <= s5;
        ELSE
          next_state <= s2;
        END IF;
      WHEN s1 => 
        next_state <= s3;
      WHEN s5 => 
        next_state <= s3;
      WHEN OTHERS =>
        next_state <= s0;
    END CASE;
  END PROCESS nextstate_proc;
 
  -- Concurrent Statements
  -- Clocked output assignments
  tri_phase <= tri_phase_cld;
END ARCHITECTURE fsm;
